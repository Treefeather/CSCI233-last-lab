/**
 * Created by leviallery on 11/28/16.
 */

import java.lang.Math;
public class Driver {
    public static void main(String args[]) {
        Driver d = new Driver();
    }

    public Driver() {
        Strassen s = new Strassen();
        int size = 2048; // Size of initial matrix
        int[][] A = new int[size][size];
        int[][] B = new int[size][size];
        int[][] C = new int[size][size];
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                A[i][j] = (int) (5 + i);
                B[i][j] = (int) (6 + j);
            }
        }
        double startTime = System.currentTimeMillis(); //Start Timing
        int R[][] = s.multiply(A, B);
        double endTime = System.currentTimeMillis(); // End Timing
        double RunTime = endTime - startTime;
        System.out.println("Total run time Strassen = " + RunTime + " milliseconds");

        double start = System.currentTimeMillis(); //Start Timing
        BruteForce(A, B, C, size); //Run
        double end = System.currentTimeMillis(); // End Timing
        double Run = end- start;
        System.out.println("Total run time Brute Force = " + Run + " milliseconds");
       /* for (int i = 0; i < C.length; i++) {
            for (int j = 0; j < C.length; j++) {
                System.out.print(C[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
        for (int i = 0; i < R.length; i++) {
            for (int j = 0; j < R.length; j++) {
                System.out.print(R[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();*/

    }

    public void BruteForce(int A[][], int B[][], int C[][], int s) {
        int size = s;
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                C[i][j] = 0;
                for (int k = 0; k < size; k++) {
                    C[i][j] += A[i][k] * B[k][j];
                }
            }
        }
    }

    public class Strassen {
        int exit = 512; //Size of Matrix that is sent to Brute force to finish
        public int[][] multiply(int[][] A, int[][] B) {
            int n = A.length; // Get length of N
            int[][] R = new int[n][n]; // Create Answer Matrix
            if (n == 1) //Base
                R[0][0] = A[0][0] * B[0][0];
            else if(n == exit){
                BruteForce(A,B,R,exit); // Calling Brute force  to finish with smaller matrices
            }
            else {
                int[][] A00 = new int[n / 2][n / 2];
                int[][] A01 = new int[n / 2][n / 2];
                int[][] A10 = new int[n / 2][n / 2];
                int[][] A11 = new int[n / 2][n / 2];
                int[][] B00 = new int[n / 2][n / 2];
                int[][] B01 = new int[n / 2][n / 2];
                int[][] B10 = new int[n / 2][n / 2];
                int[][] B11 = new int[n / 2][n / 2];

                //Dividing A
                split(A, A00, 0, 0);
                split(A, A01, 0, n / 2);
                split(A, A10, n / 2, 0);
                split(A, A11, n / 2, n / 2);
                //Divide B
                split(B, B00, 0, 0);
                split(B, B01, 0, n / 2);
                split(B, B10, n / 2, 0);
                split(B, B11, n / 2, n / 2);

                //Using Strassen Method Multiplication
                int[][] M1 = multiply(add(A00, A11), add(B00, B11));
                int[][] M2 = multiply(add(A10, A11), B00);
                int[][] M3 = multiply(A00, subtract(B01, B11));
                int[][] M4 = multiply(A11, subtract(B10, B00));
                int[][] M5 = multiply(add(A00, A01), B11);
                int[][] M6 = multiply(subtract(A10, A00), add(B00, B01));
                int[][] M7 = multiply(subtract(A01, A11), add(B10, B11));

                int[][] C11 = add(subtract(add(M1, M4), M5), M7);
                int[][] C12 = add(M3, M5);
                int[][] C21 = add(M2, M4);
                int[][] C22 = add(subtract(add(M1, M3), M2), M6);

                //Combining
                join(C11, R, 0, 0);
                join(C12, R, 0, n / 2);
                join(C21, R, n / 2, 0);
                join(C22, R, n / 2, n / 2);
            }
            return R;
        }
        //Subtraction
        public int[][] subtract(int[][] A, int[][] B) {
            int n = A.length;
            int[][] C = new int[n][n];
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++)
                    C[i][j] = A[i][j] - B[i][j];
            return C;
        }

        //Addition
        public int[][] add(int[][] A, int[][] B) {
            int n = A.length;
            int[][] C = new int[n][n];
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++)
                    C[i][j] = A[i][j] + B[i][j];
            return C;
        }

        //Splitting
        public void split(int[][] P, int[][] C, int iB, int jB) {
            for (int i1 = 0, i2 = iB; i1 < C.length; i1++, i2++)
                for (int j1 = 0, j2 = jB; j1 < C.length; j1++, j2++)
                    C[i1][j1] = P[i2][j2];
        }

        //Joining
        public void join(int[][] C, int[][] P, int iB, int jB) {
            for (int i1 = 0, i2 = iB; i1 < C.length; i1++, i2++)
                for (int j1 = 0, j2 = jB; j1 < C.length; j1++, j2++)
                    P[i2][j2] = C[i1][j1];
        }
    }
}
